/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.repository;

import io.swagger.model.Reservation;
import io.swagger.annotations.*;
import io.swagger.model.Room;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.time.LocalDate;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-05-12T06:30:05.493Z")

@Api(value = "reservations", description = "the reservations API")
@RequestMapping(value = "/api/v1")
public interface ReservationsApi {

    @ApiOperation(value = "Add a new reservation information to the database..", nickname = "addReservation", notes = "", tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "information saved..."),
        @ApiResponse(code = 400, message = "Bad request...") })
    @RequestMapping(value = "/reservations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
     ResponseEntity<String> addReservation(@ApiParam(value = "Pet object that needs to be added to the DB" ,required=true )  @Valid @RequestBody Reservation reservation);


    @ApiOperation(value = "Deletes a reservation", nickname = "deleteReservation", notes = "", tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "reservation successfully deleted"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Pet not found") })
    @RequestMapping(value = "/reservations/{reservationId}",
        produces = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteReservation(@ApiParam(value = "reservation id to delete",required=true) @PathVariable("reservationId") int reservationId);



    @ApiOperation(value = "Finds reservation between particular date..", nickname = "findReservationBetweenGivenDate", notes = "Multiple status values can be provided with comma separated strings", response = Reservation.class, responseContainer = "List", tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Reservation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/reservations/{startDate}/{endDate}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Reservation>> findReservationBetweenGivenDate(@ApiParam(value = "exapmle: 2020-10-02",required=true) @PathVariable("startDate") LocalDate startDate, @ApiParam(value = "exapmle: 2020-10-02",required=true) @PathVariable("endDate") LocalDate endDate);


    @ApiOperation(value = "Find all the reservation details..", nickname = "findReservations", notes = "", response = Reservation.class, responseContainer = "List", tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully find information..", response = Reservation.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "no information in the database...") })
    @RequestMapping(value = "/reservations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
     ResponseEntity<List<Reservation>> findReservations();


    @ApiOperation(value = "Find reservation by ID", nickname = "getReservationById", notes = "Returns a single reservation..", response = Reservation.class, tags={ "Reservation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Reservation.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Reservation not found") })
    @RequestMapping(value = "/reservations/{reservationId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Reservation> getReservationById(@ApiParam(value = "ID of reservation to return",required=true) @PathVariable("reservationId") int reservationId);


    @ApiOperation(value = "Updated Reservation information", nickname = "updateReservation", notes = "update reservation information", tags={ "Reservation", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successfully updated"),
            @ApiResponse(code = 400, message = "Invalid id supplied"),
            @ApiResponse(code = 404, message = "room not found") })
    @RequestMapping(value = "/reservations/{reservationId}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateReservationById(@ApiParam(value = "name that need to be updated",required=true) @PathVariable("reservationId") int reservationId,@ApiParam(value = "Updated room object" ,required=true )  @Valid @RequestBody Reservation reservation);
}
