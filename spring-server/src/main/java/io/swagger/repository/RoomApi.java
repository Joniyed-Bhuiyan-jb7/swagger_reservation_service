/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.repository;

import io.swagger.model.Room;
import io.swagger.annotations.*;
import io.swagger.model.RoomType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-05-12T06:30:05.493Z")

@Api(value = "room", description = "the room API")
@RequestMapping(value = "/api/v1")
public interface RoomApi {

    @ApiOperation(value = "Add new room details to database..", nickname = "createRoom", notes = "Add new room.", tags={ "Room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully added the information.."),
        @ApiResponse(code = 400, message = "bad request..") })
    @RequestMapping(value = "/room",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createRoom(@ApiParam(value = "Created room object" ,required=true )  @Valid @RequestBody Room room);


    @ApiOperation(value = "Delete single room information..", nickname = "deleteRoom", notes = "", tags={ "Room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully deleted"),
        @ApiResponse(code = 400, message = "Invalid room id supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/room/{roomId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRoom(@ApiParam(value = "The id that needs to be deleted",required=true) @PathVariable("roomId") int roomId);


    @ApiOperation(value = "get all room information..", nickname = "getAllRoom", notes = "get all room.", response = Room.class, responseContainer = "List", tags={ "Room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully find information..", response = Room.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "no information in the database...") })
    @RequestMapping(value = "/room",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Room>> getAllRoom();


    @ApiOperation(value = "Get room by room id", nickname = "getRoomById", notes = "", response = Room.class, tags={ "Room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Room.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/room/{roomId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Room> getRoomById(@ApiParam(value = "The id that needs to be fetched room info. ",required=true) @PathVariable("roomId") int roomId);


    @ApiOperation(value = "Get room by room number", nickname = "getRoomByNumber", notes = "", response = Room.class, tags={ "Room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Room.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/room/byNumber/{roomNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Room> getRoomByNumber(@ApiParam(value = "The type that needs to be fetched room info. ",required=true) @PathVariable("roomNumber") int roomNumber);


    @ApiOperation(value = "Get room by room type", nickname = "getRoomByType", notes = "", response = Room.class, tags={ "Room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Room.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/room/byType/{roomType}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Room>> getRoomByType(@ApiParam(value = "The type that needs to be fetched room info. ",required=true) @PathVariable("roomType") RoomType roomType);

    @ApiOperation(value = "Updated Room information", nickname = "updateRoom", notes = "update room information", tags={ "Room", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully updated"),
        @ApiResponse(code = 400, message = "Invalid id supplied"),
        @ApiResponse(code = 404, message = "room not found") })
    @RequestMapping(value = "/room/{roomId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRoom(@ApiParam(value = "name that need to be updated",required=true) @PathVariable("roomId") int roomId,@ApiParam(value = "Updated room object" ,required=true )  @Valid @RequestBody Room room);

}
